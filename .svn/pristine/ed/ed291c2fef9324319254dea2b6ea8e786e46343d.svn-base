package com.zhg.javakc.modules.execute.roadway.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.zhg.javakc.base.page.Page;
import com.zhg.javakc.modules.execute.mine.entity.MineEntity;
import com.zhg.javakc.modules.execute.mining.entity.MiningEntity;
import com.zhg.javakc.modules.execute.roadway.entity.RoadwayEntity;
import com.zhg.javakc.modules.execute.roadway.service.RoadWayService;
import com.zhg.javakc.modules.execute.worksurface.entity.SurfaceEntity;

@Controller
@RequestMapping("roadway")
public class LoadwayController {
//	矿井巷道操作
	@Resource
	private RoadWayService service;

	/**
	 * 查询方法
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("query")
	public ModelAndView query(ModelAndView view, MineEntity mineEntity, MiningEntity miningEntity,
			SurfaceEntity surfaceEntity, HttpServletRequest req, HttpServletResponse resp) {
		try {
			String hql = null;
//			todo需要修改
			if (mineEntity.getMineId() == null) {
				hql = " select roadwaySet FROM MineEntity ";
				view.setViewName("execute/roadway/list");
			} else if (miningEntity.getMiningId() != null) {
				hql = " select roadwaySet FROM MiningEntity ";
				view.setViewName("execute/roadway/list");
			} else if (surfaceEntity.getWorkId() != null) {
				hql = " select roadwaySet FROM SurfaceEntity ";
				view.setViewName("execute/roadway/list");
			}
			view.addObject("page", service.queryPageByCondition(hql, null, new Page<RoadwayEntity>(req, resp)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return view;
	}

	/**
	 * 新增方法
	 */
	@RequestMapping("create")
	public String create(MineEntity mineEntity, MiningEntity miningEntity, SurfaceEntity surfaceEntity,
			RoadwayEntity roadwayEntity) throws Exception {
		roadwayEntity.getMineEntities().add(mineEntity);
//		todo测试 需要修改
		if (mineEntity.getMineId() == null) {
			roadwayEntity.getMineEntities().add(mineEntity);
		} else if (miningEntity.getMiningId() != null) {
			roadwayEntity.getMiningEntities().add(miningEntity);
		} else if (surfaceEntity.getWorkId() != null) {
			roadwayEntity.getSurfaceEntities().add(surfaceEntity);
		}
		service.createOrupdate(roadwayEntity);
		return "redirect:query.do";
	}

	/**
	 * 修改查询方法
	 */
	@RequestMapping("view")
	public String view(String ids, ModelMap model) throws Exception {
		model.put("roadwayEntity", service.get(RoadwayEntity.class, ids));
		return "execute/roadway/update";
	}
	/**
	 * 根据id查询
	 */
	@RequestMapping("look")
	public String look(String ids, ModelMap model) throws Exception {
		model.put("roadwayEntity", service.get(RoadwayEntity.class, ids));
		return "execute/roadway/look";
	}
    /**
     * 状态修改
     * @param ids
     * @return
     * @throws Exception
     */
	@RequestMapping("state")
	public String state(String ids) throws Exception {
		RoadwayEntity roadwayEntity = service.load(RoadwayEntity.class, ids);
		if (roadwayEntity.getRoadywayStatus() == 1) {
			roadwayEntity.setRoadywayStatus(0);
			service.update(roadwayEntity);
		}else {
			roadwayEntity.setRoadywayStatus(1);
			service.update(roadwayEntity);
		}
		return "redirect:query.do";
	}

	/**
	 * 修改方法
	 */
	@RequestMapping("update")
	public String update(RoadwayEntity roadwayEntity) throws Exception {
		service.update(roadwayEntity);
		return "redirect:query.do";
	}

	/**
	 * 删除方法
	 */
	@RequestMapping("delete")
	public String delete(String[] ids) throws Exception {
		service.delete(RoadwayEntity.class, ids);
		return "redirect:query.do";
	}
}
